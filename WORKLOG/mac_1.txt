int getMac()
{
	NCB   ncb;     
	UCHAR   uRetCode;   
	int   num   =   0;   
	LANA_ENUM   lana_enum;     
	memset(&ncb,   0,   sizeof(ncb)   );     
	ncb.ncb_command   =   NCBENUM;       // 对网卡发送请求的命令,获取网卡数
	ncb.ncb_buffer   =   (unsigned   char*)&lana_enum;     
	ncb.ncb_length   =   sizeof(lana_enum);     
	
	struct ASTAT                 //copy头文件中定义
	{
		ADAPTER_STATUS adapt;
		NAME_BUFFER NameBuf[30];
	};


	//向网卡发送NCBENUM命令,以获取当前机器的网卡信息,如有多少个网卡   
	//每张网卡的编号等     
	uRetCode   =   Netbios(&ncb);   
	if   (uRetCode   ==   0)     
	{   
		num   =   lana_enum.length;          
		//对每一张网卡,以其网卡编号为输入编号,获取其MAC地址     
		for   (int   i   =   0;   i   <   num;   i++)   
		{   
			ASTAT   Adapter;   
			/*if(GetAddressByIndex(lana_enum.lana[i],Adapter)   ==   0)   
			{   
				pMacAddr[i].b1   =   Adapter.adapt.adapter_address[0];   
				pMacAddr[i].b2   =   Adapter.adapt.adapter_address[1];   
				pMacAddr[i].b3   =   Adapter.adapt.adapter_address[2];   
				pMacAddr[i].b4   =   Adapter.adapt.adapter_address[3];   
				pMacAddr[i].b5   =   Adapter.adapt.adapter_address[4];   
				pMacAddr[i].b6   =   Adapter.adapt.adapter_address[5];   
			}   */
			memset(&ncb,0,sizeof(ncb));    //使用之前要使ncb结构清0
			ncb.ncb_command=NCBRESET;      //对选定的网卡发送命令,以便进行初始化
			ncb.ncb_lana_num=lana_enum.lana[i];
			uRetCode=Netbios(&ncb);
			//
			memset(&ncb,0,sizeof(ncb)); 
			ncb.ncb_command=NCBSSTAT;
			strcpy((char*)ncb.ncb_callname,"*");
			ncb.ncb_buffer=(UCHAR*)&Adapter;
			ncb.ncb_length=sizeof(Adapter);
			//接着发送命令获取网卡信息
			uRetCode=Netbios(&ncb);
			if(uRetCode==0)
			{
				char mac[15], * lpmac;
				sprintf(mac,"%02X-%02X-%02X-%02X-%02X-%02X",
						Adapter.adapt.adapter_address[0],
						Adapter.adapt.adapter_address[1],
						Adapter.adapt.adapter_address[2],
						Adapter.adapt.adapter_address[3],
						Adapter.adapt.adapter_address[4],
						Adapter.adapt.adapter_address[5]);
				lpmac=mac;
				cout<<lpmac<<endl;
			}
			else
			{
				cout<<"exceptions:"<<(int)uRetCode<<endl;
				
			}
			
		}   
	}   
	return   num;   

}